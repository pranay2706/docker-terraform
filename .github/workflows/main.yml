name: CI and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get version info
        id: version
        run: |
          echo "VERSION=${GITHUB_SHA::7}" >> $GITHUB_ENV
          echo "BUILD_NUMBER=${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags:
            ${{ secrets.DOCKER_USERNAME }}/react-app:${{ env.BUILD_NUMBER }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Retrieve EC2 Instance ID
        id: ec2_instance_id
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=ReactAppInstance" --query "Reservations[*].Instances[*].InstanceId" --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
        continue-on-error: true # To ensure the workflow continues even if this step fails

      - name: Retrieve EC2 Public IP
        id: ec2_ip
        run: |
          if [ -z "${{ env.INSTANCE_ID }}" ]; then
            echo "EC2 instance not found. Exiting."
            exit 1
          fi
          PUBLIC_IP=$(aws ec2 describe-instances --instance-ids ${{ env.INSTANCE_ID }} --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
          echo "EC2_PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: Verify SSH Access
        run: |
          if [ -z "${{ env.EC2_PUBLIC_IP }}" ]; then
            echo "No public IP found. Exiting."
            exit 1
          fi
          ssh -o BatchMode=yes -o ConnectTimeout=5 -i private_key.pem ubuntu@${{ env.EC2_PUBLIC_IP }} "echo SSH connection successful"

      - name: SSH into EC2 and deploy
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@${{ env.EC2_PUBLIC_IP }} <<EOF
            # Update and install Docker
            sudo apt update
            sudo apt install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
            
            # Pull and run the Docker image
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/react-app:${{ env.BUILD_NUMBER }}
            sudo docker run -d -p 3000:3000 ${{ secrets.DOCKER_USERNAME }}/react-app:${{ env.BUILD_NUMBER }}
          EOF
